import sys
import bcrypt
import fdb
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QTableWidget, QTableWidgetItem,
    QMessageBox, QHeaderView, QMenuBar, QAction, QFrame, QGridLayout,
    QTabWidget, QGroupBox
)
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt
from PyQt5.QtCore import Qt

# ==============================================
# Database Configuration
# ==============================================
DB_PATH = r'E:\New folder (5)\App\database\accounting.fdb'
DB_USER = 'sysdba'
DB_PASS = '13750920'

def create_db_connection():
    try:
        return fdb.connect(
            dsn=DB_PATH,
            user=DB_USER,
            password=DB_PASS,
            charset='UTF8'
        )
    except Exception as e:
        QMessageBox.critical(None, "Database Error", f"Failed to connect to the database:\n{str(e)}")
        sys.exit(1)

def init_database():
    conn = create_db_connection()
    cur = conn.cursor()

    try:
        # Users table
        try:
            cur.execute("SELECT 1 FROM USERS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE USERS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        USERNAME VARCHAR(50) NOT NULL,
                        PASSWORD_HASH VARCHAR(100) NOT NULL,
                        CONSTRAINT USERNAME_UNIQUE UNIQUE (USERNAME)
                    )
                """)

        # Customers table
        try:
            cur.execute("SELECT 1 FROM CUSTOMERS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE CUSTOMERS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        NAME VARCHAR(100) NOT NULL,
                        PHONE VARCHAR(20),
                        ADDRESS VARCHAR(200),
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)

        # Products table
        try:
            cur.execute("SELECT 1 FROM PRODUCTS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE PRODUCTS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        NAME VARCHAR(100) NOT NULL,
                        DESCRIPTION VARCHAR(500),
                        PRICE DECIMAL(15,2) NOT NULL,
                        STOCK_QUANTITY INTEGER DEFAULT 0
                    )
                """)

        # Products table
        try:
            cur.execute("SELECT 1 FROM PRODUCTS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE PRODUCTS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        NAME VARCHAR(100) NOT NULL,
                        CODE VARCHAR(50),
                        CATEGORY VARCHAR(50),
                        UNIT_PRICE DECIMAL(15,2) NOT NULL,
                        STOCK_QUANTITY INTEGER DEFAULT 0,
                        MIN_STOCK INTEGER DEFAULT 0,
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)

        # Sales table
        try:
            cur.execute("SELECT 1 FROM SALES ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE SALES (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        CUSTOMER_ID INTEGER,
                        TOTAL_AMOUNT DECIMAL(15,2) NOT NULL,
                        DISCOUNT DECIMAL(15,2) DEFAULT 0,
                        SALE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        DESCRIPTION VARCHAR(200),
                        FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID)
                    )
                """)

        # Sale Items table
        try:
            cur.execute("SELECT 1 FROM SALE_ITEMS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE SALE_ITEMS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        SALE_ID INTEGER,
                        PRODUCT_ID INTEGER,
                        QUANTITY INTEGER NOT NULL,
                        UNIT_PRICE DECIMAL(15,2) NOT NULL,
                        TOTAL_PRICE DECIMAL(15,2) NOT NULL,
                        FOREIGN KEY (SALE_ID) REFERENCES SALES(ID),
                        FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
                    )
                """)

        # Purchases table
        try:
            cur.execute("SELECT 1 FROM PURCHASES ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE PURCHASES (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        SUPPLIER_ID INTEGER,
                        TOTAL_AMOUNT DECIMAL(15,2) NOT NULL,
                        PURCHASE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        DESCRIPTION VARCHAR(200),
                        FOREIGN KEY (SUPPLIER_ID) REFERENCES CUSTOMERS(ID)
                    )
                """)

        # Purchase Items table
        try:
            cur.execute("SELECT 1 FROM PURCHASE_ITEMS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE PURCHASE_ITEMS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        PURCHASE_ID INTEGER,
                        PRODUCT_ID INTEGER,
                        QUANTITY INTEGER NOT NULL,
                        UNIT_PRICE DECIMAL(15,2) NOT NULL,
                        TOTAL_PRICE DECIMAL(15,2) NOT NULL,
                        FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASES(ID),
                        FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
                    )
                """)

        # Payments table
        try:
            cur.execute("SELECT 1 FROM PAYMENTS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE PAYMENTS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        TYPE VARCHAR(20) NOT NULL, -- 'RECEIVE' or 'PAY'
                        REFERENCE_ID INTEGER, -- Can be SALE_ID or PURCHASE_ID
                        AMOUNT DECIMAL(15,2) NOT NULL,
                        PAYMENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        PAYMENT_METHOD VARCHAR(50),
                        DESCRIPTION VARCHAR(200)
                    )
                """)

        # Settings table
        try:
            cur.execute("SELECT 1 FROM SETTINGS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                cur.execute("""
                    CREATE TABLE SETTINGS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        SETTING_KEY VARCHAR(50) NOT NULL,
                        SETTING_VALUE VARCHAR(500),
                        DESCRIPTION VARCHAR(200),
                        CONSTRAINT SETTING_KEY_UNIQUE UNIQUE (SETTING_KEY)
                    )
                """)

        # Check for TRANSACTIONS table
        try:
            cur.execute("SELECT 1 FROM TRANSACTIONS ROWS 1")
        except fdb.Error as e:
            if 'Table unknown' in str(e):
                # Create TRANSACTIONS table
                cur.execute("""
                    CREATE TABLE TRANSACTIONS (
                        ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        USER_ID INTEGER NOT NULL,
                        AMOUNT DECIMAL(15, 2) NOT NULL,
                        DESCRIPTION VARCHAR(200),
                        TRANSACTION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        CONSTRAINT FK_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
                    )
                """)

        # Check for admin user
        cur.execute("SELECT COUNT(*) FROM USERS")
        if cur.fetchone()[0] == 0:
            hashed_pass = bcrypt.hashpw("admin123".encode(), bcrypt.gensalt())
            cur.execute("INSERT INTO USERS (USERNAME, PASSWORD_HASH) VALUES (?, ?)", 
                       ("admin", hashed_pass.decode()))

        conn.commit()
    except Exception as e:
        print(f"Database operation error: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()

# ==============================================
# Login Window
# ==============================================
class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ورود به سیستم حسابداری")
        self.setFixedSize(400, 300)
        self.setup_ui()

    def setup_ui(self):
        # Widgets
        self.lbl_title = QLabel("سیستم حسابداری شخصی")
        self.lbl_title.setFont(QFont("B Yekan", 16, QFont.Bold))
        self.lbl_title.setAlignment(Qt.AlignCenter)

        self.txt_username = QLineEdit()
        self.txt_username.setPlaceholderText("نام کاربری")

        self.txt_password = QLineEdit()
        self.txt_password.setPlaceholderText("رمز عبور")
        self.txt_password.setEchoMode(QLineEdit.Password)

        self.btn_login = QPushButton("ورود")
        self.btn_login.clicked.connect(self.authenticate)

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.lbl_title)
        layout.addWidget(self.txt_username)
        layout.addWidget(self.txt_password)
        layout.addWidget(self.btn_login)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        # Styling
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f0f0f0;
            }
            QLabel {
                color: #333;
                margin-bottom: 20px;
                font-family: 'B Yekan';
            }
            QLineEdit {
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                margin: 5px 0;
                font-size: 14px;
                font-family: 'B Yekan';
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 12px;
                border: none;
                border-radius: 5px;
                font-size: 16px;
                margin-top: 15px;
                font-family: 'B Yekan';
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)

    def authenticate(self):
        username = self.txt_username.text()
        password = self.txt_password.text()

        conn = create_db_connection()
        cur = conn.cursor()

        try:
            cur.execute("SELECT id, password_hash FROM users WHERE username = ?", (username,))
            user = cur.fetchone()

            if user and bcrypt.checkpw(password.encode(), user[1].encode()):
                self.open_dashboard(user[0])
            else:
                QMessageBox.warning(self, "خطا", "نام کاربری یا رمز عبور اشتباه است!")
        finally:
            conn.close()

    def open_dashboard(self, user_id):
        self.dashboard = DashboardWindow(user_id)
        self.dashboard.show()
        self.close()

# ==============================================
# Dashboard Window
# ==============================================
class DashboardWindow(QMainWindow):
    def __init__(self, user_id):
        super().__init__()
        self.user_id = user_id
        self.setWindowTitle("داشبورد حسابداری")
        self.setMinimumSize(1200, 800)
        self.setup_ui()

    def setup_ui(self):
        # Main Widget and Layout
        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)
        self.setCentralWidget(central_widget)

        # Header
        header = QWidget()
        header.setFixedHeight(60)
        header.setStyleSheet("""
            QWidget {
                background-color: #1a237e;
                color: white;
            }
            QPushButton {
                border: none;
                padding: 5px;
                color: white;
            }
        """)
        header_layout = QHBoxLayout(header)
        header_layout.setContentsMargins(10, 0, 10, 0)

        # Right side of header (Persian date)
        from persiantools.jdatetime import JalaliDateTime
        current_date = JalaliDateTime.now().strftime("%Y/%m/%d")
        date_label = QLabel(current_date)
        date_label.setFont(QFont("B Yekan", 12))

        # Center (Title)
        header_title = QLabel("سیستم حسابداری شخصی")
        header_title.setFont(QFont("B Yekan", 14))
        header_title.setAlignment(Qt.AlignCenter)

        # Left side (Username and Logout)
        user_container = QWidget()
        user_layout = QHBoxLayout(user_container)

        username_label = QLabel("کاربر: admin")  # Replace with actual username
        username_label.setFont(QFont("B Yekan", 12))

        logout_btn = QPushButton("خروج")
        logout_btn.setFont(QFont("B Yekan", 12))
        logout_btn.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                padding: 5px 15px;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
        """)
        logout_btn.clicked.connect(self.logout)

        user_layout.addWidget(username_label)
        user_layout.addWidget(logout_btn)

        header_layout.addWidget(user_container)
        header_layout.addStretch()
        header_layout.addWidget(header_title)
        header_layout.addStretch()
        header_layout.addWidget(date_label)

        # Main Content Container
        content_container = QWidget()
        content_layout = QHBoxLayout(content_container)
        content_layout.setSpacing(0)
        content_layout.setContentsMargins(0, 0, 0, 0)

        # Sidebar
        self.sidebar = QWidget()
        self.sidebar.setFixedWidth(250)
        self.sidebar.setStyleSheet("""
            QWidget {
                background-color: #2c3e50;
                color: white;
            }
            QWidget#sidebar {
                border-radius: 10px;
                margin: 10px;
                border: 1px solid #34495e;
            }
            QPushButton {
                text-align: right;
                padding: 15px;
                border: none;
                color: white;
                background-color: transparent;
                font-family: 'B Yekan';
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #34495e;
                padding-right: 25px;
            }
        """)

        # Add Font Awesome icons using text
        def create_icon_text(icon_name):
            icons = {
                'fa-home': '⌂',
                'fa-users': '⚇',
                'fa-coins': '⛁',
                'fa-chart-bar': '⛊',
                'fa-cog': '⚙'
            }
            btn_style = """
                QPushButton {
                    text-align: right;
                    padding: 15px 20px;
                    border: none;
                    color: white;
                    background-color: transparent;
                    font-family: 'Segoe UI Symbol', 'B Yekan';
                    font-size: 14px;
                    border-radius: 5px;
                    margin: 5px 10px;
                }
                QPushButton:hover {
                    background-color: #34495e;
                    border-right: 4px solid #1abc9c;
                }
                QPushButton:pressed {
                    background-color: #2c3e50;
                }
            """
            return icons.get(icon_name, ''), btn_style

        sidebar_layout = QVBoxLayout(self.sidebar)
        sidebar_layout.setSpacing(0)
        sidebar_layout.setContentsMargins(0, 0, 0, 0)

        # Logo/Brand area
        brand_widget = QWidget()
        brand_layout = QHBoxLayout(brand_widget)
        brand_label = QLabel("حسابداری شخصی")
        brand_label.setStyleSheet("font-size: 18px; font-weight: bold; padding: 20px;")
        brand_layout.addWidget(brand_label)
        sidebar_layout.addWidget(brand_widget)

        # Separator
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setStyleSheet("background-color: #3d4f63; margin: 0 15px;")
        sidebar_layout.addWidget(line)

        # Sidebar Buttons with Font Awesome icons
        buttons_data = [
            ("داشبورد", "fa-home", self.show_dashboard),
            ("اطلاعات پایه", "fa-info-circle", self.show_base_info),
            ("خرید و فروش", "fa-exchange-alt", self.show_transactions),
            ("دریافت و پرداخت", "fa-money-bill-wave", None),
            ("گزارشات", "fa-chart-bar", None),
            ("انبار", "fa-warehouse", None),
            ("مشتریان", "fa-users", None),
            ("تنظیمات", "fa-cog", None),
            ("پشتیبان‌گیری", "fa-database", None)
        ]

        for text, icon, callback in buttons_data:
            icon, style = create_icon_text(icon)
            btn = QPushButton(f'{icon}  {text}')
            btn.setStyleSheet(style)
            if callback:
                btn.clicked.connect(callback)
            sidebar_layout.addWidget(btn)

        sidebar_layout.addStretch()

        # Bottom area for user info
        user_widget = QWidget()
        user_widget.setStyleSheet("background-color: #34495e; padding: 15px;")
        user_layout = QVBoxLayout(user_widget)
        user_name = QLabel("کاربر: ادمین")
        user_name.setStyleSheet("color: white; font-size: 12px;")
        user_layout.addWidget(user_name)
        sidebar_layout.addWidget(user_widget)

        # Content Area
        self.content_area = QWidget()
        self.content_layout = QVBoxLayout(self.content_area)
        self.content_layout.setContentsMargins(20, 20, 20, 20)

        # Add widgets to layouts (sidebar on the right)
        content_layout.addWidget(self.sidebar)
        content_layout.addWidget(self.content_area)

        # Set layout direction to right-to-left
        content_layout.setDirection(QHBoxLayout.RightToLeft)
        self.content_area.setLayoutDirection(Qt.RightToLeft)

        main_layout.addWidget(header)
        main_layout.addWidget(content_container)

        # Add cards and other content to content_layout
        self.setup_dashboard_content()

    def toggle_sidebar(self):
        if self.sidebar.width() == 250:
            self.sidebar.setFixedWidth(50)
        else:
            self.sidebar.setFixedWidth(250)

    def setup_dashboard_content(self):
        # Cards Layout
        cards_layout = QHBoxLayout()
        cards_layout.setSpacing(20)

        # Card Styles
        card_styles = """
            QWidget#card {
                background-color: %s;
                border-radius: 15px;
                padding: 20px;
                margin: 5px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            QWidget#card:hover {
                margin-top: 0px;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            QLabel { 
                color: white;
                font-family: 'B Yekan';
            }
            QLabel#cardTitle {
                font-size: 16px;
                font-weight: bold;
                margin-bottom: 10px;
            }
            QLabel#cardValue {
                font-size: 24px;
                font-weight: bold;
            }
        """

        # Create cards container
        cards_container = QWidget()
        cards_container.setLayout(cards_layout)
        self.content_layout.addWidget(cards_container)

        # Add some spacing
        self.content_layout.addSpacing(20)

    def show_base_info(self):
        # پاک کردن محتوای قبلی
        for i in reversed(range(self.content_layout.count())): 
            widget = self.content_layout.itemAt(i).widget()
            if widget:
                widget.setVisible(False)
                widget.deleteLater()

        # ایجاد تب‌ها
        tabs = QTabWidget()
        tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #cccccc;
                background: white;
                border-radius: 5px;
            }
            QTabBar::tab {
                background: #f0f0f0;
                border: 1px solid #cccccc;
                padding: 10px 15px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            QTabBar::tab:selected {
                background: white;
                border-bottom-color: white;
            }
        """)

        # تب واحدها
        units_tab = QWidget()
        units_layout = QVBoxLayout()
        
        # فرم اضافه کردن واحد جدید
        form_group = QGroupBox("افزودن واحد جدید")
        form_layout = QHBoxLayout()
        
        unit_name = QLineEdit()
        unit_name.setPlaceholderText("نام واحد")
        unit_symbol = QLineEdit()
        unit_symbol.setPlaceholderText("نماد واحد")
        add_btn = QPushButton("افزودن")
        add_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        form_layout.addWidget(unit_name)
        form_layout.addWidget(unit_symbol)
        form_layout.addWidget(add_btn)
        form_group.setLayout(form_layout)
        units_layout.addWidget(form_group)
        
        # جدول واحدها
        units_table = QTableWidget()
        units_table.setColumnCount(3)
        units_table.setHorizontalHeaderLabels(["شناسه", "نام واحد", "نماد"])
        units_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        units_layout.addWidget(units_table)
        
        units_tab.setLayout(units_layout)
        tabs.addTab(units_tab, "واحدها")

        # تب گروه‌های کالا
        categories_tab = QWidget()
        categories_layout = QVBoxLayout()
        
        # فرم اضافه کردن گروه جدید
        cat_form_group = QGroupBox("افزودن گروه جدید")
        cat_form_layout = QHBoxLayout()
        
        cat_name = QLineEdit()
        cat_name.setPlaceholderText("نام گروه")
        cat_desc = QLineEdit()
        cat_desc.setPlaceholderText("توضیحات")
        cat_add_btn = QPushButton("افزودن")
        cat_add_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        cat_form_layout.addWidget(cat_name)
        cat_form_layout.addWidget(cat_desc)
        cat_form_layout.addWidget(cat_add_btn)
        cat_form_group.setLayout(cat_form_layout)
        categories_layout.addWidget(cat_form_group)
        
        # جدول گروه‌ها
        categories_table = QTableWidget()
        categories_table.setColumnCount(3)
        categories_table.setHorizontalHeaderLabels(["شناسه", "نام گروه", "توضیحات"])
        categories_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        categories_layout.addWidget(categories_table)
        
        categories_tab.setLayout(categories_layout)
        tabs.addTab(categories_tab, "گروه‌های کالا")

        # اضافه کردن تب‌ها به صفحه اصلی
        self.content_layout.addWidget(tabs)


        # Top Cards Layout
        cards_layout = QHBoxLayout()
        cards_layout.setContentsMargins(20, 20, 20, 20)
        cards_layout.setSpacing(20)

        # Card Widgets
        card_styles = """
            QWidget#card {
                background-color: %s;
                border-radius: 10px;
                padding: 15px;
            }
            QLabel { 
                color: white;
                font-family: 'B Yekan';
            }
        """

        # New Customer Card
        new_customer_card = QWidget()
        new_customer_card.setObjectName("card")
        new_customer_card.setStyleSheet(card_styles % "#00BCD4")
        new_customer_layout = QVBoxLayout(new_customer_card)
        title = QLabel("مشتری جدید")
        title.setObjectName("cardTitle")
        value = QLabel("➕")
        value.setObjectName("cardValue")
        new_customer_layout.addWidget(title)
        new_customer_layout.addWidget(value)
        new_customer_layout.setAlignment(Qt.AlignCenter)
        cards_layout.addWidget(new_customer_card)

        # New Sale Card
        new_sale_card = QWidget()
        new_sale_card.setObjectName("card")
        new_sale_card.setStyleSheet(card_styles % "#FF9800")
        new_sale_layout = QVBoxLayout(new_sale_card)
        new_sale_layout.addWidget(QLabel("فروش جدید"))
        new_sale_layout.addWidget(QLabel("+"))
        cards_layout.addWidget(new_sale_card)

        # Total Income Card
        income_card = QWidget()
        income_card.setObjectName("card")
        income_card.setStyleSheet(card_styles % "#9C27B0")
        income_layout = QVBoxLayout(income_card)
        income_layout.addWidget(QLabel("درآمد کل"))
        income_layout.addWidget(QLabel("7,299,000"))
        cards_layout.addWidget(income_card)

        # Total Sales Card
        sales_card = QWidget()
        sales_card.setObjectName("card")
        sales_card.setStyleSheet(card_styles % "#03A9F4")
        sales_layout = QVBoxLayout(sales_card)
        sales_layout.addWidget(QLabel("فروش"))
        sales_layout.addWidget(QLabel("194,529,750"))
        cards_layout.addWidget(sales_card)

        # Create charts container
        charts_container = QWidget()
        charts_layout = QHBoxLayout(charts_container)

        # Bar Chart (Weekly Sales)
        weekly_sales_widget = QWidget()
        weekly_sales_layout = QVBoxLayout(weekly_sales_widget)
        weekly_sales_layout.addWidget(QLabel("فروش هفتگی"))
        # Here you would add actual chart widget
        charts_layout.addWidget(weekly_sales_widget)

        # Pie Chart (Customer Sources)
        customer_sources_widget = QWidget()
        customer_sources_layout = QVBoxLayout(customer_sources_widget)
        customer_sources_layout.addWidget(QLabel("روش های جذب مشتری"))
        # Here you would add actual chart widget
        charts_layout.addWidget(customer_sources_widget)

        # Add charts container to content layout
        self.content_layout.addWidget(charts_container)

        # Transactions Table
        table_container = QWidget()
        table_container.setObjectName("tableContainer")
        table_container.setStyleSheet("""
            QWidget#tableContainer {
                background-color: white;
                border-radius: 15px;
                padding: 20px;
                margin: 20px;
            }
            QTableWidget {
                border: none;
                background-color: white;
                gridline-color: #e0e0e0;
            }
            QTableWidget::item {
                padding: 10px;
                border-bottom: 1px solid #f0f0f0;
            }
            QHeaderView::section {
                background-color: #1a237e;
                color: white;
                padding: 12px;
                border: none;
                font-weight: bold;
            }
        """)
        table_layout = QVBoxLayout(table_container)

        # Table Title
        table_title = QLabel("تراکنش‌های اخیر")
        table_title.setStyleSheet("font-size: 16px; font-weight: bold; color: #1a237e; margin-bottom: 15px;")
        table_layout.addWidget(table_title)

        # Create Table
        self.transactions_table = QTableWidget()
        self.transactions_table.setColumnCount(4)
        self.transactions_table.setHorizontalHeaderLabels(["شناسه", "مبلغ", "توضیحات", "تاریخ"])
        self.transactions_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.transactions_table.setAlternatingRowColors(True)
        self.transactions_table.setStyleSheet("""
            QTableWidget {
                alternate-background-color: #f8f9fa;
            }
        """)

        # Add some sample data
        sample_data = [
            ("1", "1,500,000", "خرید کالا", "1402/12/25"),
            ("2", "2,300,000", "فروش محصول", "1402/12/24"),
            ("3", "800,000", "هزینه حمل و نقل", "1402/12/23"),
        ]

        self.transactions_table.setRowCount(len(sample_data))
        for row, (id, amount, desc, date) in enumerate(sample_data):
            self.transactions_table.setItem(row, 0, QTableWidgetItem(id))
            self.transactions_table.setItem(row, 1, QTableWidgetItem(amount))
            self.transactions_table.setItem(row, 2, QTableWidgetItem(desc))
            self.transactions_table.setItem(row, 3, QTableWidgetItem(date))

        table_layout.addWidget(self.transactions_table)
        self.content_layout.addWidget(table_container)

        # Calendar Widget
        calendar_container = QWidget()
        calendar_container.setObjectName("calendar")
        calendar_container.setStyleSheet("""
            QWidget#calendar {
                background-color: white;
                border-radius: 15px;
                padding: 20px;
                margin: 20px;
                border: 1px solid #e0e0e0;
            }
            QLabel {
                color: #333;
                padding: 8px;
                border-radius: 4px;
                font-family: 'B Yekan';
            }
            QLabel#dayHeader {
                color: #1a237e;
                font-weight: bold;
                font-size: 13px;
                border-bottom: 2px solid #e0e0e0;
                margin-bottom: 5px;
            }
            QLabel#currentDay {
                background-color: #1a237e;
                color: white;
                font-weight: bold;
            }
            QLabel#normalDay {
                background-color: transparent;
            }
            QLabel#normalDay:hover {
                background-color: #f5f5f5;
            }
            QLabel#weekendDay {
                color: #e91e63;
            }
        """)
        calendar_layout = QVBoxLayout(calendar_container)
        calendar_layout.setSpacing(10)

        # Calendar Title
        calendar_title = QLabel("تقویم")
        calendar_title.setStyleSheet("font-size: 18px; font-weight: bold; color: #1a237e; margin-bottom: 15px;")
        calendar_layout.addWidget(calendar_title)

        # Calendar Grid
        days_grid = QGridLayout()
        days_grid.setSpacing(5)
        days = ["شنبه", "یک‌شنبه", "دوشنبه", "سه‌شنبه", "چهارشنبه", "پنج‌شنبه", "جمعه"]

        # Add weekday headers
        for i, day in enumerate(days):
            label = QLabel(day)
            label.setObjectName("dayHeader")
            days_grid.addWidget(label, 0, i)

        # Add calendar days
        from persiantools.jdatetime import JalaliDateTime
        today = JalaliDateTime.now()
        current_day = today.day
        days_in_month = 30

        for i in range(days_in_month):
            day_num = i + 1
            row = (i + days.index("شنبه")) // 7 + 1
            col = (i + days.index("شنبه")) % 7

            day_label = QLabel(str(day_num))

            # Set different styles for different types of days
            if day_num == current_day:
                day_label.setObjectName("currentDay")
            elif col == 6:  # Friday
                day_label.setObjectName("weekendDay")
            else:
                day_label.setObjectName("normalDay")

            day_label.setAlignment(Qt.AlignCenter)

            days_grid.addWidget(day_label, row, col)

        calendar_layout.addLayout(days_grid)
        self.content_layout.addWidget(calendar_container)

        # Style the window
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QLabel {
                font-family: 'B Yekan';
                font-size: 14px;
            }
        """)

    def show_dashboard(self):
        # پاک کردن محتوای قبلی
        for i in reversed(range(self.content_layout.count())): 
            widget = self.content_layout.itemAt(i).widget()
            if widget:
                widget.setVisible(False)
                widget.deleteLater()
        
        # نمایش داشبورد اصلی
        self.setup_dashboard_content()

    def show_transactions(self):
        # پاک کردن محتوای قبلی
        for i in reversed(range(self.content_layout.count())): 
            self.content_layout.itemAt(i).widget().setVisible(False)
            self.content_layout.itemAt(i).widget().deleteLater()
        
        # ایجاد تب‌ها برای خرید و فروش
        tabs = QTabWidget()
        
        # تب فروش
        sales_tab = QWidget()
        sales_layout = QVBoxLayout()
        sales_tab.setLayout(sales_layout)
        tabs.addTab(sales_tab, "فروش")
        
        # تب خرید
        purchases_tab = QWidget()
        purchases_layout = QVBoxLayout()
        purchases_tab.setLayout(purchases_layout)
        tabs.addTab(purchases_tab, "خرید")
        
        self.content_layout.addWidget(tabs)

    def load_transactions(self):
        conn = create_db_connection()
        cur = conn.cursor()

        try:
            cur.execute("""
                SELECT id, amount, description, transaction_date 
                FROM transactions 
                WHERE user_id = ?
                ORDER BY transaction_date DESC
                ROWS 20
            """, (self.user_id,))

            self.table.setRowCount(0)
            for row_num, row_data in enumerate(cur.fetchall()):
                self.table.insertRow(row_num)
                for col_num, data in enumerate(row_data):
                    self.table.setItem(row_num, col_num, QTableWidgetItem(str(data)))

        finally:
            conn.close()

    def add_transaction(self):
        amount = self.txt_amount.text()
        desc = self.txt_desc.text()

        if not amount:
            QMessageBox.warning(self, "خطا", "لطفاً مبلغ را وارد کنید!")
            return

        try:
            amount = float(amount)
        except ValueError:
            QMessageBox.warning(self, "خطا", "مبلغ باید عددی باشد!")
            return

        conn = create_db_connection()
        cur = conn.cursor()

        try:
            cur.execute("""
                INSERT INTO transactions (user_id, amount, description)
                VALUES (?, ?, ?)
            """, (self.user_id, amount, desc))

            conn.commit()
            QMessageBox.information(self, "موفق", "تراکنش با موفقیت ثبت شد!")
            self.txt_amount.clear()
            self.txt_desc.clear()
            self.load_transactions()

        except Exception as e:
            QMessageBox.critical(self, "خطا", f"خطا در ثبت تراکنش:\n{str(e)}")
        finally:
            conn.close()

    def logout(self):
        self.login_window = LoginWindow()
        self.login_window.show()
        self.close()

# ==============================================
# Run the Application
# ==============================================
class ServerConnection:
    @staticmethod
    def backup_database():
        try:
            from datetime import datetime
            backup_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.fbk"
            
            # Create backups directory if not exists
            if not os.path.exists('backups'):
                os.makedirs('backups')
                
            backup_path = os.path.join('backups', backup_name)
            
            # Create backup using gbak
            os.system(f'gbak -b {DB_PATH} {backup_path} -user {DB_USER} -password {DB_PASS}')
            return True, "پشتیبان‌گیری با موفقیت انجام شد"
        except Exception as e:
            return False, f"خطا در پشتیبان‌گیری: {str(e)}"

    @staticmethod
    def restore_database(backup_path):
        try:
            # Restore using gbak
            os.system(f'gbak -r {backup_path} {DB_PATH} -user {DB_USER} -password {DB_PASS}')
            return True, "بازیابی با موفقیت انجام شد"
        except Exception as e:
            return False, f"خطا در بازیابی: {str(e)}"

    @staticmethod
    def export_report(report_type, start_date=None, end_date=None):
        conn = create_db_connection()
        cur = conn.cursor()
        
        try:
            if report_type == "sales":
                query = """
                    SELECT s.ID, c.NAME, s.TOTAL_AMOUNT, s.SALE_DATE, s.DESCRIPTION
                    FROM SALES s
                    LEFT JOIN CUSTOMERS c ON s.CUSTOMER_ID = c.ID
                    WHERE s.SALE_DATE BETWEEN ? AND ?
                """
            elif report_type == "purchases":
                query = """
                    SELECT p.ID, c.NAME, p.TOTAL_AMOUNT, p.PURCHASE_DATE, p.DESCRIPTION
                    FROM PURCHASES p
                    LEFT JOIN CUSTOMERS c ON p.SUPPLIER_ID = c.ID
                    WHERE p.PURCHASE_DATE BETWEEN ? AND ?
                """
            
            cur.execute(query, (start_date, end_date))
            data = cur.fetchall()
            
            # Export to Excel or CSV
            import csv
            filename = f"report_{report_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            with open(filename, 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerows(data)
                
            return True, f"گزارش در فایل {filename} ذخیره شد"
        except Exception as e:
            return False, f"خطا در تهیه گزارش: {str(e)}"
        finally:
            conn.close()

if __name__ == "__main__":
    try:
        # Create QApplication instance first
        app = QApplication(sys.argv)
        app.setFont(QFont("B Yekan", 10))  # Set default font for the application
        
        # Initialize Database
        init_database()
        
        # Create and show main window
        window = LoginWindow()
        window.show()
        
        # Start application event loop
        sys.exit(app.exec())
    except Exception as e:
        print(f"Error starting application: {str(e)}")
        if 'app' in locals():
            sys.exit(app.exec())
        else:
            sys.exit(1)
